<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Medicine;
use PhpOffice\PhpSpreadsheet\IOFactory;
use Illuminate\Support\Facades\DB;

class ImportMedicinesCommand extends Command
{
    protected $signature = 'import:danhmucthuoc 
        {file : ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Excel (.xlsx)} 
        {--fresh : X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi import}';

    protected $description = 'Import d·ªØ li·ªáu thu·ªëc t·ª´ file Excel v√†o b·∫£ng medicines';

    public function handle(): int
    {
        $filePath = $this->argument('file');
        $fresh = $this->option('fresh');

        if (!file_exists($filePath)) {
            $this->error("‚ùå File kh√¥ng t·ªìn t·∫°i: {$filePath}");
            return Command::FAILURE;
        }

        if ($fresh) {
            $confirm = $this->confirm('‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô d·ªØ li·ªáu b·∫£ng medicines kh√¥ng?', true);
            if ($confirm) {
                DB::table('medicines')->truncate();
                $this->warn('üßπ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu c≈© trong b·∫£ng medicines.');
            }
        }

        $this->info("üîç ƒêang ƒë·ªçc d·ªØ li·ªáu t·ª´: {$filePath}");

        try {
            $spreadsheet = IOFactory::load($filePath);
            $sheet = $spreadsheet->getSheet(0);
            $rows = $sheet->toArray(null, true, true, true);

            // B·ªè qua ti√™u ƒë·ªÅ
            $header = array_shift($rows);
            $this->info("üì¶ ƒêang import " . count($rows) . " d√≤ng...");

            $count = 0;

            foreach ($rows as $row) {
                // üîπ L√†m s·∫°ch d·ªØ li·ªáu
                $giayPhep = $this->cleanString($row['K'] ?? '');
                $tenBietDuoc = $this->cleanString($row['F'] ?? '');

                // B·ªè qua d√≤ng r·ªóng
                if (empty($tenBietDuoc) && empty($giayPhep)) {
                    continue;
                }

                // üîπ Chu·∫©n h√≥a gi√° tr·ªã s·ªë
                $giaKeKhai = $this->parseNumber($row['O'] ?? null);
                $donGia    = $this->parseNumber($row['P'] ?? null);
                $giaVon    = $this->parseNumber($row['Q'] ?? null);

                $data = [
                    'stt_tt20_2022'      => isset($row['B']) && is_numeric($row['B']) ? (float) $row['B'] : null,
                    'phan_nhom_tt15'     => isset($row['C']) && is_numeric($row['C']) ? (int) $row['C'] : null,
                    'ten_hoat_chat'      => $this->cleanString($row['D'] ?? ''),
                    'nong_do_ham_luong'  => $this->cleanString($row['E'] ?? ''),
                    'ten_biet_duoc'      => $tenBietDuoc,
                    'dang_bao_che'       => $this->cleanString($row['G'] ?? ''),
                    'duong_dung'         => $this->cleanString($row['H'] ?? ''),
                    'don_vi_tinh'        => $this->cleanString($row['I'] ?? ''),
                    'quy_cach_dong_goi'  => $this->cleanString($row['J'] ?? ''),
                    'giay_phep_luu_hanh' => $this->cleanLicense($row['K'] ?? null),
                    'han_dung'           => $this->cleanString($row['L'] ?? ''),
                    'co_so_san_xuat'     => $this->cleanString($row['M'] ?? ''),
                    'nuoc_san_xuat'      => $this->cleanString($row['N'] ?? ''),
                    'gia_ke_khai'        => $giaKeKhai,
                    'don_gia'            => $donGia,
                    'gia_von'            => $giaVon,
                    'nha_phan_phoi'      => $this->cleanString($row['R'] ?? ''),
                    'nhom_thuoc'         => $this->cleanString($row['S'] ?? ''),
                    'link_hinh_anh'      => trim((string)($row['T'] ?? 'images/thuoc.png')),
                ];

                // üîπ Ki·ªÉm tra tr√πng l·∫∑p
                $exists = Medicine::where('ten_biet_duoc', $data['ten_biet_duoc'])
                    ->orWhere('giay_phep_luu_hanh', $data['giay_phep_luu_hanh'])
                    ->exists();

                if (!$exists) {
                    Medicine::create($data);
                    $count++;
                }
            }

            $this->info("‚úÖ ƒê√£ import th√†nh c√¥ng {$count} d√≤ng m·ªõi!");
            return Command::SUCCESS;

        } catch (\Exception $e) {
            $this->error("‚ö†Ô∏è L·ªói khi import: " . $e->getMessage());
            return Command::FAILURE;
        }
    }

    /**
 * L√†m s·∫°ch chu·ªói: ch·ªâ lo·∫°i b·ªè xu·ªëng d√≤ng, tab v√† kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi
 */
private function cleanString(?string $value): string
{
    if ($value === null) return '';
    $value = trim((string) $value);
    // Ch·ªâ lo·∫°i b·ªè k√Ω t·ª± ƒëi·ªÅu khi·ªÉn, KH√îNG xo√° kho·∫£ng tr·∫Øng trong n·ªôi dung
    $value = str_replace(["\n", "\r", "\t"], ' ', $value);
    return preg_replace('/\s+/', ' ', $value); // chu·∫©n ho√° nhi·ªÅu kho·∫£ng tr·∫Øng th√†nh 1
}

/**
 * Chu·∫©n h√≥a chu·ªói s·ªë: "15.000" ‚Üí 15000, "98,000" ‚Üí 98000
 */
private function parseNumber($value): ?float
{
    if (is_null($value)) {
        return null;
    }

    // N·∫øu l√† s·ªë th·∫≠t
    if (is_numeric($value)) {
        return (float) $value;
    }

    // N·∫øu l√† chu·ªói c√≥ k√Ω t·ª± . ho·∫∑c ,
    $clean = preg_replace('/[^\d.]/', '', str_replace(',', '', (string)$value));
    return is_numeric($clean) ? (float) $clean : null;
}
private function cleanLicense(?string $value): ?string
{
    if (!$value) return null;

    // Lo·∫°i b·ªè t·∫•t c·∫£ d·∫•u ph·∫©y, ch·∫•m, xu·ªëng d√≤ng, tab
    $clean = preg_replace('/[,\r\n\t]+/', '', $value);

    // X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi
    $clean = trim($clean);

    // N·∫øu l√† chu·ªói to√†n s·ªë (nh∆∞ 560110011523), tr·∫£ v·ªÅ nguy√™n
    // N·∫øu c√≥ k√Ω t·ª± ch·ªØ (VD: VN-12345-12), v·∫´n gi·ªØ nguy√™n
    return $clean;
}

}
